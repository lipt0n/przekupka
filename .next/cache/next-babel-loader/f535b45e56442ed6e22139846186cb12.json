{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Chart } from 'primereact/chart';\nexport default function trader({\n  pair,\n  data,\n  store\n}) {\n  const lastPrices = store.ticks.map(tick => {\n    return {\n      y: tick.pairs[pair].c[0],\n      x: tick.timestamp\n    };\n  });\n  const transactions = Object.values(store.closedTransactions).filter(t => t.descr.pair === pair).map(t => _objectSpread(_objectSpread({}, t.descr), {}, {\n    status: t.status,\n    volume: t.vol,\n    cost: t.cost,\n    fee: t.fee,\n    time: t.opentm\n  }));\n  const basicData = {\n    labels: lastPrices,\n    datasets: [{\n      label: 'price',\n      data: lastPrices,\n      fill: false,\n      borderColor: '#42A5F5'\n    }]\n  };\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Chart, {\n      type: \"line\",\n      data: basicData,\n      style: {\n        height: 200\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    })\n  });\n}","map":{"version":3,"sources":["/home/mjl/makeMeRich/src/ui/trader.tsx"],"names":["React","Chart","trader","pair","data","store","lastPrices","ticks","map","tick","y","pairs","c","x","timestamp","transactions","Object","values","closedTransactions","filter","t","descr","status","volume","vol","cost","fee","time","opentm","basicData","labels","datasets","label","fill","borderColor","height","responsive","maintainAspectRatio"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,eAAe,SAASC,MAAT,CAAgB;AAACC,EAAAA,IAAD;AAAMC,EAAAA,IAAN;AAAWC,EAAAA;AAAX,CAAhB,EAAwE;AACnF,QAAMC,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,IAAc;AAC7C,WAAO;AACHC,MAAAA,CAAC,EAACD,IAAI,CAACE,KAAL,CAAWR,IAAX,EAAiBS,CAAjB,CAAmB,CAAnB,CADC;AAEHC,MAAAA,CAAC,EAACJ,IAAI,CAACK;AAFJ,KAAP;AAIH,GALkB,CAAnB;AAMA,QAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcZ,KAAK,CAACa,kBAApB,EACpBC,MADoB,CACbC,CAAC,IAAEA,CAAC,CAACC,KAAF,CAAQlB,IAAR,KAAeA,IADL,EAEpBK,GAFoB,CAEhBY,CAAC,oCACKA,CAAC,CAACC,KADP;AAEEC,IAAAA,MAAM,EAACF,CAAC,CAACE,MAFX;AAGEC,IAAAA,MAAM,EAACH,CAAC,CAACI,GAHX;AAIEC,IAAAA,IAAI,EAACL,CAAC,CAACK,IAJT;AAKEC,IAAAA,GAAG,EAACN,CAAC,CAACM,GALR;AAMEC,IAAAA,IAAI,EAACP,CAAC,CAACQ;AANT,IAFe,CAArB;AAaA,QAAMC,SAAS,GAAG;AAEfC,IAAAA,MAAM,EAACxB,UAFQ;AAGdyB,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,KAAK,EAAE,OADX;AAEI5B,MAAAA,IAAI,EAACE,UAFT;AAGI2B,MAAAA,IAAI,EAAE,KAHV;AAIIC,MAAAA,WAAW,EAAE;AAJjB,KADM;AAHI,GAAlB;AAaA,sBAAO;AAAA,2BACR,KAAC,KAAD;AAAS,MAAA,IAAI,EAAC,MAAd;AAAqB,MAAA,IAAI,EAAEL,SAA3B;AAAsC,MAAA,KAAK,EAAE;AAACM,QAAAA,MAAM,EAAC;AAAR,OAA7C;AAA2D,MAAA,OAAO,EAAE;AAChEC,QAAAA,UAAU,EAAC,IADqD;AAC9CC,QAAAA,mBAAmB,EAAE;AADyB;AAApE;AADQ,IAAP;AAQH","sourcesContent":["import React from 'react'\nimport { Chart } from 'primereact/chart'\nimport moment from 'moment'\nexport default function trader({pair,data,store}:{pair:string, data:any ,store:IState}){\n    const lastPrices = store.ticks.map((tick:ITick)=>{\n        return {\n            y:tick.pairs[pair].c[0],\n            x:tick.timestamp\n        }\n    })\n    const transactions = Object.values(store.closedTransactions)\n    .filter(t=>t.descr.pair===pair)\n    .map(t=>({\n            ...t.descr,\n            status:t.status,\n            volume:t.vol,\n            cost:t.cost,\n            fee:t.fee,\n            time:t.opentm\n            \n        })\n    )\n     \n    const basicData = {\n        \n       labels:lastPrices,\n        datasets: [\n            {\n                label: 'price',\n                data:lastPrices,\n                fill: false,\n                borderColor: '#42A5F5'\n            },\n           \n        ]\n    }\n    return <>\n   <Chart   type=\"line\" data={basicData} style={{height:200}} options={{\n       responsive:true,  maintainAspectRatio: false,\n\n}} />\n\n    \n    </>\n}"]},"metadata":{},"sourceType":"module"}