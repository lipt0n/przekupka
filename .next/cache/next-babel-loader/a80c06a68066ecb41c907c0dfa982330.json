{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  balance: {},\n  pairs: {}\n};\nexport const reducer = (state, action) => {\n  if (action.type === 'SET_BALANCE') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      balance: action.payload\n    });\n  }\n\n  if (action.type === 'SET_PAIRS') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      pairs: action.payload\n    });\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/home/mjl/makeMeRich/src/ui/store.ts"],"names":["initialState","balance","pairs","reducer","state","action","type","payload"],"mappings":";;;;;;AACA,OAAO,MAAMA,YAAmB,GAAG;AAC/BC,EAAAA,OAAO,EAAC,EADuB;AAE/BC,EAAAA,KAAK,EAAC;AAFyB,CAA5B;AAKP,OAAO,MAAMC,OAAO,GAAC,CAACC,KAAD,EAAcC,MAAd,KAAsC;AACvD,MAAGA,MAAM,CAACC,IAAP,KAAc,aAAjB,EAA+B;AAC3B,2CAAWF,KAAX;AAAkBH,MAAAA,OAAO,EAACI,MAAM,CAACE;AAAjC;AACH;;AACD,MAAGF,MAAM,CAACC,IAAP,KAAc,WAAjB,EAA6B;AACzB,2CAAWF,KAAX;AAAkBF,MAAAA,KAAK,EAACG,MAAM,CAACE;AAA/B;AACH;;AACD,SAAOH,KAAP;AACH,CARM","sourcesContent":["\nexport const initialState:IState = {\n    balance:{},\n    pairs:{}\n}\n\nexport const reducer=(state:IState,action:IAction):IState=>{\n    if(action.type==='SET_BALANCE'){\n        return {...state, balance:action.payload}\n    }\n    if(action.type==='SET_PAIRS'){\n        return {...state, pairs:action.payload}\n    }\n    return state\n}"]},"metadata":{},"sourceType":"module"}